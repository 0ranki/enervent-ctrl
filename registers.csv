0;Reserved;;;;;Reserved;;;
1;HREG_T_OP1;int16;10;;Room temperature sensor TE20;Temperature at operator panel 1;;Temperature at operator panel 1;
2;HREG_T_OP2;int16;10;;Room temperature sensor TE21;Temperature at operator panel 2;;Temperature at operator panel 2;
3;HREG_EFFECTIVE_TF;uint16;1;;Current supply fan speed;The current effective TF fanspeed;Fan speed, supply air;Current supply air fan speed;
4;HREG_EFFECTIVE_PF;uint16;1;;Current exhaust fan speed;The current effective PF fanspeed;Fan speed, extract air;Current extract air fan speed;
5;HREG_UPCOMING_TIME_PROGRAM;uint16;1;;Next time program;Indicates the time program which will start during the next two hours.;;;Values 1-20 indicate week program slots, value 101-105 indicate year program slots
6;HREG_T_FRS;int16;10;;Fresh air;TE01 (fresh air) temperature.;Fresh air;Outside air temperature at the unit (sensor TE01);
7;HREG_T_SPLY_LTO;int16;10;;Supply air after HRC;TE05: Fresh (incoming) air temperature after HRC.;Supply air after HRC;Supply air temperature after heat recovery (sensor TE05);
8;HREG_T_SPLY;int16;10;;Supply air;TE10 Room supply air temperature;Supply air;Supply air temperature after supply air heater (sensor TE10);
9;HREG_T_WST;int16;10;;Waste air;TE32 Waste air temperature;Exhaust air;Exhaust air temperature (sensor TE32);
10;HREG_T_EXT;int16;10;;Room removed air;TE30 Room removed air temperature.;Extract air temperature;Extract air temperature from building at the unit (sensor TE30);
11;HREG_T_EXT_LTO;int16;10;;Removed air before HRC;TE31 removed air before heat recycler.;Extract air before HRC;Extract air temperature after extract air coil before heat recovery in HP units (sensor TE31);
12;HREG_T_WR;int16;10;;Return water;TE45 heater element return water temperature.;Return water;Return water temperature in supply air heater (sensor TE45);
13;HREG_HUM_EXT;uint16;1;;Exhaust air humidity;RH30 measurement, removed air relative humidity;Air humidity;Extract air relative humidity \%RH at the unit (sensor RH30);
14;HREG_PRES_SPLYF;uint16;1;;Pressure difference supply;Pressure difference over filter, TF side;Pressure difference supply;Pressure difference over filter, TF side;
15;HREG_PRES_EXTF;uint16;1;;Pressure difference ext;Pressure difference over filter, PF side;Pressure difference ext.;Pressure difference over filter, PF side;
16;HREG_TE07;int16;10;;HP/MDX/Dehum supply air;Supply air temperature after dehumidification coil, or after heat pump coil in HP-E, HP-W, MDX-E and MDX-W units (sensor TE07);;;
17;HREG_AI1;uint16;10;;Analog input voltage;Raw conversion result for AI1;Measured input voltage AI1;Current measured input voltage;
18;HREG_AI2;uint16;10;;Analog input voltage;Raw conversion result for AI2;Measured input voltage AI2;Current measured input voltage;
19;HREG_AI3;uint16;10;;Analog input voltage;Raw conversion result for AI3;Measured input voltage AI3;Current measured input voltage;
20;HREG_AI4;uint16;10;;Analog input voltage;Raw conversion result for AI4;Measured input voltage AI4;Current measured input voltage;
21;HREG_AI5;uint16;10;;Analog input voltage;Raw conversion result for AI5;Measured input voltage AI5;Current measured input voltage;
22;HREG_AI6;uint16;10;;Analog input voltage;Raw conversion result for AI6;Measured input voltage AI6;Current measured input voltage;
23;HREG_AI1_RES;uint16;1;;Calculated value;Calculated result for AI1;Calculated value AI1;Calculated result;
24;HREG_AI2_RES;uint16;1;;Calculated value;Calculated result for AI2;Calculated value AI2;Calculated result;
25;HREG_AI3_RES;uint16;1;;Calculated value;Calculated result for AI3;Calculated value AI3;Calculated result;
26;HREG_AI4_RES;uint16;1;;Calculated value;Calculated result for AI4;Calculated value AI4;Calculated result;
27;HREG_AI5_RES;uint16;1;;Calculated value;Calculated result for AI5;Calculated value AI5;Calculated result;
28;HREG_AI6_RES;uint16;1;;Calculated value;Calculated result for AI6;Calculated value AI6;Calculated result;
29;HREG_LTO_N_SPLY;uint16;1;;Heat recovery efficiency n supply;HRC efficiency ratio (supply side);Heat recovery efficiency, supply air;Supply air temperature efficiency. Calculated from outside air-, supply air after heat recovery- and extract air temperature;
30;HREG_LTO_N_EXT;uint16;1;;Heat recovery efficiency n exhaust;HRC efficiency ratio (ext (removed air) side);Heat recovery efficiency, exhaust air;Extract air temperature efficiency. Calculated from extract air-, exhaust air- and outside air temperature. In HP-units calculated from HRC extract air-, exhaust air- and outside air temperature;
31;HREG_NTC_X6;int16;10;;Input X6;Optional NTC-10 input X6 measurement;;;
32;HREG_NTC_X7;int16;10;;Input X7;Optional NTC-10 input X7 measurement;;;
33;HREG_ABS_HUM_CTRL_OUTPUT;int16;1;;Absolute humidity control output;-100...0% = dehumidifying, 0 = none, 0...100% = humidifying;;;
34;HREG_NWK_STATUS;bitfield;1;;Network status;Ethernet block status;;;EMAC_STATUS_FAIL 0x0001, EMAC_STATUS_OK  0x0002, EMAC_STATUS_AUTONEG_COMPLETE 0x0004, EMAC_STATUS_AUTONEG_FAIL    0x0008, EMAC_STATUS_LINK_OK         0x0010  /* 0: no link, 1: link ok */, EMAC_STATUS_LINK_SPEED      0x0020  /* 0: 10 M, 1: 100M */, EMAC_STATUS_DUPLEX          0x0040  /* 0: half duplex, 1: full duplex */ , EMAC_STATUS_INIT_ONGOING    0x0080   
35;HREG_RH_MEAN;uint16;1;;48h air humidity average;Mean relative humidity, with 48 hour history, updated every hour.;Average air humidity, 48h;Extract air 48h mean relative humidity \%RH at the unit (sensor RH30). Updated every hour;
36;HREG_ABSHUM10;uint16;10;;Supply air absolute humidity;Supply air absolute humidity, calculated from sensors TE10 and RH10, assuming normal atmospheric pressure.;;;
37;HREG_SEC_RTC;uint16;1;;s;RTC seconds.;s;RTC seconds;
38;HREG_MIN_RTC;uint16;1;;min;RTC minutes.;min;RTC minutes;
39;HREG_HOUR_RTC;uint16;1;;h;RTC hours, 24 hour format.;h;RTC hours, 24 hour format;
40;HREG_DAY_RTC;uint16;1;;;RTC day-of-month;;RTC day of month;
41;HREG_MONTH_RTC;uint16;1;;;RTC month.;;RTC month;
42;HREG_YEAR_RTC;uint16;1;;;RTC year, exporessed in years since 2000.;;RTC year, expressed in years since 2000;
43;Reserved;;;;;Reserved;;;
44;HREG_MODE;bitfield;1;;Status;The current mode of the machine, used to display information to the user.;Status;All current states of unit, eg. Home, Central vacuum cleaner, HP/EDX defrost etc.;Bit 0 indicates Max cooling mode, bit 1: max heating. Bit 2: Machine is stopped due to A alarm. Bit 3 indicates the machine has been stopped by request (ie. not due to alarm condition). Bit 4: indicates Away state. Bit 5 is reserved. Bit 6 indicates temperature boosting, bit 7 CO2 boosting, bit 8 RH boosting, bit 9 manual boosting. Bit 10 overpressure mode, bit 11 cooker hood mode, bit 12 central vacuum cleaner mode. Bit 13 indicates cool-off period of electrical heating coil. Bit 14 indicates summer night cooling mode. Bit 15 indicates heat recovery wheel defrosting mode.  Value 0 indicates “normal” state, no special status is active. 
45;HREG_EXTMODE;bitfield;1;;Temperature control step;Currently active temperature control step: Cooling, Heat recovery (LTO), or heating.;Temperature controller;"Displays current state of temperature controller; cooling, heat recovery, heating or none.";Bits 0,1,2,3 have “enumerated” meaning:  TEMP_STEP_NONE = 0, TEMP_STEP_COOLING = 1, TEMP_STEP_LTO = 2, TEMP_STEP_HEATING = 4, TEMP_STEP_STARTUP = 7, TEMP_STEP_DEHUMIDIFICATION = 8. Bit 15 indicates Aqua mode, bit 14 indicates pre-heating active, bit 13 indicates that HP compressor effect is being limited, bit 12 indicates defrosting state of the HP or MDX unit
46;HREG_ROOM_TEMP;int16;10;;Room temperature average;TE20 room temperature, average value calculated from op panel sensors  and room temperature transmitters.;Room temperature average;Room temperature (average temperature of sensors connected to OP wallmounts and AI temperature measurements if connected);
47;HREG_CASCADE_SP;int16;10;;Setpoint for supply air;Setpoint for temperature controller responsible for maintaining the room supply air at a constant level;Setpoint for supply air;Setpoint for temperature controller responsible for maintaining the room supply air at a constant level;
48;HREG_DISPLAY_SP;int16;10;;;Temperature controller setpoint shown to user;;;
49;HREG_OUTPUT;int16;1;;Controller output;Output from the TC1 temperature PI controller;Temperature controller output;-200 to -100 additional cooling, -100...-1=cooling, 0=nothing, 1...100=heat recovery, 101...200=additional heating or heat pump, 201...300=additional heating in heat pump units;
50;Reserved;;;;;Reserved;;;
51;Reserved;;;;;Reserved;;;
52;Reserved;;;;;Reserved;;;
53;Reserved;;;;;Reserved;;;
54;Reserved;;;;;Reserved;;;
55;Reserved;;;;;Reserved;;;
56;Reserved;;;;;Reserved;;;
57;Reserved;;;;;Reserved;;;
58;Reserved;;;;;Reserved;;;
59;Reserved;;;;;Reserved;;;
60;Reserved;;;;;Reserved;;;
61;Reserved;;;;;Reserved;;;
62;Reserved;;;;;Reserved;;;
63;Reserved;;;;;Reserved;;;
64;Reserved;;;;;Reserved;;;
65;Reserved;;;;;Reserved;;;
66;Reserved;;;;;Reserved;;;
67;Reserved;;;;;Reserved;;;
68;Reserved;;;;;Reserved;;;
69;Reserved;;;;;Reserved;;;
70;Reserved;;;;;Reserved;;;
71;Reserved;;;;;Reserved;;;
72;Reserved;;;;;Reserved;;;
73;Reserved;;;;;Reserved;;;
74;Reserved;;;;;Reserved;;;
75;Reserved;;;;;Reserved;;;
76;Reserved;;;;;Reserved;;;
77;Reserved;;;;;Reserved;;;
78;Reserved;;;;;Reserved;;;
79;Reserved;;;;;Reserved;;;
80;Reserved;;;;;Reserved;;;
81;Reserved;;;;;Reserved;;;
82;Reserved;;;;;Reserved;;;
83;Reserved;;;;;Reserved;;;
84;Reserved;;;;;Reserved;;;
85;Reserved;;;;;Reserved;;;
86;Reserved;;;;;Reserved;;;
87;Reserved;;;;;Reserved;;;
88;Reserved;;;;;Reserved;;;
89;Reserved;;;;;Reserved;;;
90;Reserved;;;;;Reserved;;;
91;Reserved;;;;;Reserved;;;
92;Reserved;;;;;Reserved;;;
93;Reserved;;;;;Reserved;;;
94;Reserved;;;;;Reserved;;;
95;Reserved;;;;;Reserved;;;
96;Reserved;;;;;Reserved;;;
97;Reserved;;;;;Reserved;;;
98;Reserved;;;;;Reserved;;;
99;Reserved;;;;;Reserved;;;
100;Reserved;;;;;Reserved;;;
101;Reserved;;;;;Reserved;;;
102;Reserved;;;;;Reserved;;;
103;Reserved;;;;;Reserved;;;
104;HREG_AI1_TYPE;uint16;1;;Sensor type;Type of external sensor in AI1.;Sensor type;;
105;HREG_AI2_TYPE;uint16;1;;Sensor type;Type of external sensor in AI2.;Sensor type;;
106;HREG_AI3_TYPE;uint16;1;;Sensor type;Type of external sensor in AI3.;Sensor type;;
107;HREG_AI4_TYPE;uint16;1;;Sensor type;Type of external sensor in AI4.;Sensor type;;
108;HREG_AI5_TYPE;uint16;1;;Sensor type;Type of external sensor in AI5.;Sensor type;;
109;HREG_AI6_TYPE;uint16;1;;Sensor type;Type of external sensor in AI6.;Sensor type;;
110;HREG_AI1_VL;uint16;10;0 - 100;Voltage low;AI1 voltage low;Voltage low;Input signal lower limit;
111;HREG_AI2_VL;uint16;10;0 - 100;Voltage low;AI2 voltage low;Voltage low;Input signal lower limit;
112;HREG_AI3_VL;uint16;10;0 - 100;Voltage low;AI3 voltage low;Voltage low;Input signal lower limit;
113;HREG_AI4_VL;uint16;10;0 - 100;Voltage low;AI4 voltage low;Voltage low;Input signal lower limit;
114;HREG_AI5_VL;uint16;10;0 - 100;Voltage low;AI5 voltage low;Voltage low;Input signal lower limit;
115;HREG_AI6_VL;uint16;10;0 - 100;Voltage low;AI6 voltage low;Voltage low;Input signal lower limit;
116;HREG_AI1_VH;uint16;10;0 - 100;Voltage high;AI1 voltage high;Voltage high;Input signal upper limit;
117;HREG_AI2_VH;uint16;10;0 - 100;Voltage high;AI2 voltage high;Voltage high;Input signal upper limit;
118;HREG_AI3_VH;uint16;10;0 - 100;Voltage high;AI3 voltage high;Voltage high;Input signal upper limit;
119;HREG_AI4_VH;uint16;10;0 - 100;Voltage high;AI4 voltage high;Voltage high;Input signal upper limit;
120;HREG_AI5_VH;uint16;10;0 - 100;Voltage high;AI5 voltage high;Voltage high;Input signal upper limit;
121;HREG_AI6_VH;uint16;10;0 - 100;Voltage high;AI6 voltage high;Voltage high;Input signal upper limit;
122;HREG_AI1_RL;int16;1;;Result low;AI1 output value from voltage low;Voltage low, effect;Result of input signal equivalent to Voltage low value;
123;HREG_AI2_RL;int16;1;;Result low;AI2 output value from voltage low;Voltage low, effect;Result of input signal equivalent to Voltage low value;
124;HREG_AI3_RL;int16;1;;Result low;AI3 output value from voltage low;Voltage low, effect;Result of input signal equivalent to Voltage low value;
125;HREG_AI4_RL;int16;1;;Result low;AI4 output value from voltage low;Voltage low, effect;Result of input signal equivalent to Voltage low value;
126;HREG_AI5_RL;int16;1;;Result low;AI5 output value from voltage low;Voltage low, effect;Result of input signal equivalent to Voltage low value;
127;HREG_AI6_RL;int16;1;;Result low;AI6 output value from voltage low;Voltage low, effect;Result of input signal equivalent to Voltage low value;
128;HREG_AI1_RH;int16;1;;Result high;AI1 output value from voltage high;Voltage high, effect;Result of input signal equivalent to Voltage high value;
129;HREG_AI2_RH;int16;1;;Result high;AI2 output value from voltage high;Voltage high, effect;Result of input signal equivalent to Voltage high value;
130;HREG_AI3_RH;int16;1;;Result high;AI3 output value from voltage high;Voltage high, effect;Result of input signal equivalent to Voltage high value;
131;HREG_AI4_RH;int16;1;;Result high;AI4 output value from voltage high;Voltage high, effect;Result of input signal equivalent to Voltage high value;
132;HREG_AI5_RH;int16;1;;Result high;AI5 output value from voltage high;Voltage high, effect;Result of input signal equivalent to Voltage high value;
133;HREG_AI6_RH;int16;1;;Result high;AI6 output value from voltage high;Voltage high, effect;Result of input signal equivalent to Voltage high value;
134;HREG_TE01_24H_AVG;int16;10;;Average outside temperature;24-hour outside temperature average;;;
135;HREG_T_SETPOINT;int16;10;0 - 500;Supply air setpoint;The desired setpoint set by the user.;Supply air setpoint;Desired setpoint set by the user;
136;Reserved;;;;;Reserved;;;
137;HREG_TE01_SUMMER_WINTER_THRESHOLD;int16;10;-250;Summer/Winter threshold;Summer/Winter season 24-hour average outside temperature threshold value;Summer/winter threshold temperature;"Outside air 24h average temperature; in summer mode extract air 48h average humidity, in winter mode a fixed \%RH threshold";
138;Reserved;;;;;Reserved;;;
139;Reserved;;;;;Reserved;;;
140;Reserved;;;;;Reserved;;;
141;Reserved;;;;;Reserved;;;
142;Reserved;;;;;Reserved;;;
143;Reserved;;;;;Reserved;;;
144;Reserved;;;;;Reserved;;;
145;Reserved;;;;;Reserved;;;
146;Reserved;;;;;Reserved;;;
147;Reserved;;;;;Reserved;;;
148;Reserved;;;;;Reserved;;;
149;Reserved;;;;;Reserved;;;
150;Reserved;;;;;Reserved;;;
151;Reserved;;;;;Reserved;;;
152;Reserved;;;;;Reserved;;;
153;Reserved;;;;;Reserved;;;
154;Reserved;;;;;Reserved;;;
155;Reserved;;;;;Reserved;;;
156;Reserved;;;;;Reserved;;;
157;Reserved;;;;;Reserved;;;
158;Reserved;;;;;Reserved;;;
159;Reserved;;;;;Reserved;;;
160;Reserved;;;;;Reserved;;;
161;Reserved;;;;;Reserved;;;
162;Reserved;;;;;Reserved;;;
163;Reserved;;;;;Reserved;;;
164;Reserved;;;;;Reserved;;;
165;Reserved;;;;;Reserved;;;
166;Reserved;;;;;Reserved;;;
167;Reserved;;;;;Reserved;;;
168;Reserved;;;;;Reserved;;;
169;Reserved;;;;;Reserved;;;
170;Reserved;;;;;Reserved;;;
171;Reserved;;;;;Reserved;;;
172;HREG_TEMP_DECREASE_VAL;int16;10;0 - 150;Temperature decrease;The amount of degrees the temperature should be lowered then temperature decrease function is on.;Temperature decrease;Number of degrees, under which the temperature should be maintained when temperature decrease function is on;Low limit can be negative to enable temperature increase function.
173;Reserved;;;;;Reserved;;;
174;Reserved;;;;;Reserved;;;
175;Reserved;;;;;Reserved;;;
176;Reserved;;;;;Reserved;;;
177;Reserved;;;;;Reserved;;;
178;Reserved;;;;;Reserved;;;
179;Reserved;;;;;Reserved;;;
180;Reserved;;;;;Reserved;;;
181;Reserved;;;;;Reserved;;;
182;Reserved;;;;;Reserved;;;
183;Reserved;;;;;Reserved;;;
184;Reserved;;;;;Reserved;;;
185;Reserved;;;;;Reserved;;;
186;Reserved;;;;;Reserved;;;
187;Reserved;;;;;Reserved;;;
188;Reserved;;;;;Reserved;;;
189;Reserved;;;;;Reserved;;;
190;Reserved;;;;;Reserved;;;
191;Reserved;;;;;Reserved;;;
192;Reserved;;;;;Reserved;;;
193;Reserved;;;;;Reserved;;;
194;Reserved;;;;;Reserved;;;
195;Reserved;;;;;Reserved;;;
196;Reserved;;;;;Reserved;;;
197;Reserved;;;;;Reserved;;;
198;Reserved;;;;;Reserved;;;
199;Reserved;;;;;Reserved;;;
200;Reserved;;;;;Reserved;;;
201;Reserved;;;;;Reserved;;;
202;Reserved;;;;;Reserved;;;
203;Reserved;;;;;Reserved;;;
204;Reserved;;;;;Reserved;;;
205;Reserved;;;;;Reserved;;;
206;Reserved;;;;;Reserved;;;
207;Reserved;;;;;Reserved;;;
208;Reserved;;;;;Reserved;;;
209;Reserved;;;;;Reserved;;;
210;HREG_DAY_WC1;bitfield;1;;Week timer slot #1;Week timer 1 Days when allowed. ;Days;;Bit 0: Sunday … Bit 6: Saturday
211;HREG_STA_HOUR_WC1;uint16;1;;;Week timer 1 Start h;WC1 Start h;WC1 Start h;
212;HREG_STA_MIN_WC1;uint16;1;;;Week timer 1 Start m;WC1 Start m;WC1 Start m;
213;HREG_STO_HOUR_WC1;uint16;1;;;Week timer 1 Stop h;WC1 Stop h;WC1 Stop h;
214;HREG_STO_MIN_WC1;uint16;1;;;Week timer 1 Stop m;WC1 Stop m;WC1 Stop m;
215;HREG_WC1;enumeration;1;;;Week timer 1 Function;WC1 Function;WC1 Function;#define TIMER_PROGRAM_OFF 0 #define TIMER_AWAY        1 #define TIMER_AWAY_LONG   2 #define TIMER_HEAT_DIS    3 #define TIMER_COOL_DIS    4 #define TIMER_TEMP_DECR   5 #define TIMER_MAX_H       6 #define TIMER_MAX_C       7 #define TIMER_RELAY       16 #define TIMER_BOOST       17 /* Circulation air state change time program (Pallas) */ #define TIMER_CLOSED_CIRCULATION 18 /* This time program function is relevant in OFFICE program variant (use  * method) and it means that the machine should be running (instead of  * being in STOP state). */ #define TIMER_RUNTIME     30 
216;HREG_DAY_WC2;bitfield;1;;Week timer slot #2;Week timer 2 Days when allowed. ;Days;Days;
217;HREG_STA_HOUR_WC2;uint16;1;;;Week timer 2 Start h;WC1 Start h;WC1 Start h;
218;HREG_STA_MIN_WC2;uint16;1;;;Week timer 2 Start m;WC1 Start m;WC1 Start m;
219;HREG_STO_HOUR_WC2;uint16;1;;;Week timer 2 Stop h;WC1 Stop h;WC1 Stop h;
220;HREG_STO_MIN_WC2;uint16;1;;;Week timer 2 Stop m;WC1 Stop m;WC1 Stop m;
221;HREG_WC2;enumeration;1;;;Week timer 2 Function;WC1 Function;WC1 Function;
222;HREG_DAY_WC3;bitfield;1;;Week timer slot #3;Week timer 3 Days when allowed. ;Days;Days;
223;HREG_STA_HOUR_WC3;uint16;1;;;Week timer 3 Start h;WC1 Start h;WC1 Start h;
224;HREG_STA_MIN_WC3;uint16;1;;;Week timer 3 Start m;WC1 Start m;WC1 Start m;
225;HREG_STO_HOUR_WC3;uint16;1;;;Week timer 3 Stop h;WC1 Stop h;;
226;HREG_STO_MIN_WC3;uint16;1;;;Week timer 3 Stop m;WC1 Stop m;WC1 Stop m;
227;HREG_WC3;enumeration;1;;;Week timer 3 Function;WC1 Function;WC1 Function;
228;HREG_DAY_WC4;bitfield;1;;Week timer slot #4;Week timer 4 Days when allowed. ;Days;Days;
229;HREG_STA_HOUR_WC4;uint16;1;;;Week timer 4 Start h;WC1 Start h;WC1 Start h;
230;HREG_STA_MIN_WC4;uint16;1;;;Week timer 4 Start m;WC1 Start m;WC1 Start m;
231;HREG_STO_HOUR_WC4;uint16;1;;;Week timer 4 Stop h;WC1 Stop h;WC1 Stop h;
232;HREG_STO_MIN_WC4;uint16;1;;;Week timer 4 Stop m;WC1 Stop m;WC1 Stop m;
233;HREG_WC4;uint16;1;;;Week timer 4 Function;;;
234;HREG_DAY_WC5;bitfield;1;;Week timer slot #5;Week timer 5 Days when allowed. ;Days;Days;
235;HREG_STA_HOUR_WC5;uint16;1;;;Week timer 5 Start h;WC1 Start h;WC1 Start h;
236;HREG_STA_MIN_WC5;uint16;1;;;Week timer 5 Start m;WC1 Start m;WC1 Start m;
237;HREG_STO_HOUR_WC5;uint16;1;;;Week timer 5 Stop h;WC1 Stop h;WC1 Stop h;
238;HREG_STO_MIN_WC5;uint16;1;;;Week timer 5 Stop m;WC1 Stop m;WC1 Stop m;
239;HREG_WC5;uint16;1;;;Week timer 5 Function;;;
240;HREG_DAY_WC6;bitfield;1;;Week timer slot #6;Week timer 6 Days when allowed. ;Days;Days;
241;HREG_STA_HOUR_WC6;uint16;1;;;Week timer 6 Start h;WC1 Start h;WC1 Start h;
242;HREG_STA_MIN_WC6;uint16;1;;;Week timer 6 Start m;;;
243;HREG_STO_HOUR_WC6;uint16;1;;;Week timer 6 Stop h;;;
244;HREG_STO_MIN_WC6;uint16;1;;;Week timer 6 Stop m;;;
245;HREG_WC6;uint16;1;;;Week timer 6 Function;;;
246;HREG_DAY_WC7;bitfield;1;;Week timer slot #7;Week timer 7 Days when allowed. ;Days;Days;
247;HREG_STA_HOUR_WC7;uint16;1;;;Week timer 7 Start h;WC1 Start h;WC1 Start h;
248;HREG_STA_MIN_WC7;uint16;1;;;Week timer 7 Start m;;;
249;HREG_STO_HOUR_WC7;uint16;1;;;Week timer 7 Stop h;;;
250;HREG_STO_MIN_WC7;uint16;1;;;Week timer 7 Stop m;;;
251;HREG_WC7;uint16;1;undefined;;Week timer 7 Function;;;
252;HREG_DAY_WC8;bitfield;1;;Week timer slot #8;Week timer 8 Days when allowed. ;Days;Days;
253;HREG_STA_HOUR_WC8;uint16;1;;;Week timer 8 Start h;WC1 Start h;WC1 Start h;
254;HREG_STA_MIN_WC8;uint16;1;;;Week timer 8 Start m;;;
255;HREG_STO_HOUR_WC8;uint16;1;;;Week timer 8 Stop h;;;
256;HREG_STO_MIN_WC8;uint16;1;;;Week timer 8 Stop m;;;
257;HREG_WC8;uint16;1;undefined;;Week timer 8 Function;;;
258;HREG_DAY_WC9;bitfield;1;;Week timer slot #9;Week timer 9 Days when allowed. ;Days;Days;
259;HREG_STA_HOUR_WC9;uint16;1;;;Week timer 9 Start h;;;
260;HREG_STA_MIN_WC9;uint16;1;;;Week timer 9 Start m;;;
261;HREG_STO_HOUR_WC9;uint16;1;;;Week timer 9 Stop h;;;
262;HREG_STO_MIN_WC9;uint16;1;;;Week timer 9 Stop m;;;
263;HREG_WC9;uint16;1;;;Week timer 9 Function;;;
264;HREG_DAY_WC10;bitfield;1;;Week timer slot #10;Week timer 10 Days when allowed. ;Days;Days;
265;HREG_STA_HOUR_WC10;uint16;1;;;Week timer 10 Start h;;;
266;HREG_STA_MIN_WC10;uint16;1;;;Week timer 10 Start m;;;
267;HREG_STO_HOUR_WC10;uint16;1;;;Week timer 10 Stop h;;;
268;HREG_STO_MIN_WC10;uint16;1;;;Week timer 10 Stop m;;;
269;HREG_WC10;uint16;1;;;Week timer 10 Function;;;
270;HREG_DAY_WC11;bitfield;1;;Week timer slot #11;Week timer 11 Days when allowed. ;Days;Days;
271;HREG_STA_HOUR_WC11;uint16;1;;;Week timer 11 Start h;;;
272;HREG_STA_MIN_WC11;uint16;1;;;Week timer 11 Start m;;;
273;HREG_STO_HOUR_WC11;uint16;1;;;Week timer 11 Stop h;;;
274;HREG_STO_MIN_WC11;uint16;1;;;Week timer 11 Stop m;;;
275;HREG_WC11;uint16;1;;;Week timer 11 Function;;;
276;HREG_DAY_WC12;bitfield;1;;Week timer slot #12;Week timer 12 Days when allowed. ;Days;Days;
277;HREG_STA_HOUR_WC12;uint16;1;;;Week timer 12 Start h;;;
278;HREG_STA_MIN_WC12;uint16;1;;;Week timer 12 Start m;;;
279;HREG_STO_HOUR_WC12;uint16;1;;;Week timer 12 Stop h;;;
280;HREG_STO_MIN_WC12;uint16;1;;;Week timer 12 Stop m;;;
281;HREG_WC12;uint16;1;;;Week timer 12 Function;;;
282;HREG_DAY_WC13;bitfield;1;;Week timer slot #13;Week timer 13 Days when allowed. ;Days;Days;
283;HREG_STA_HOUR_WC13;uint16;1;;;Week timer 13 Start h;;;
284;HREG_STA_MIN_WC13;uint16;1;;;Week timer 13 Start m;;;
285;HREG_STO_HOUR_WC13;uint16;1;;;Week timer 13 Stop h;;;
286;HREG_STO_MIN_WC13;uint16;1;;;Week timer 13 Stop m;;;
287;HREG_WC13;uint16;1;;;Week timer 13 Function;;;
288;HREG_DAY_WC14;bitfield;1;;Week timer slot #14;Week timer 14 Days when allowed. ;Days;Days;
289;HREG_STA_HOUR_WC14;uint16;1;;;Week timer 14 Start h;;;
290;HREG_STA_MIN_WC14;uint16;1;;;Week timer 14 Start m;;;
291;HREG_STO_HOUR_WC14;uint16;1;;;Week timer 14 Stop h;;;
292;HREG_STO_MIN_WC14;uint16;1;;;Week timer 14 Stop m;;;
293;HREG_WC14;uint16;1;;;Week timer 14 Function;;;
294;HREG_DAY_WC15;bitfield;1;;Week timer slot #15;Week timer 15 Days when allowed. ;Days;Days;
295;HREG_STA_HOUR_WC15;uint16;1;;;Week timer 15 Start h;;;
296;HREG_STA_MIN_WC15;uint16;1;;;Week timer 15 Start m;;;
297;HREG_STO_HOUR_WC15;uint16;1;;;Week timer 15 Stop h;;;
298;HREG_STO_MIN_WC15;uint16;1;;;Week timer 15 Stop m;;;
299;HREG_WC15;uint16;1;;;Week timer 15 Function;;;
300;HREG_DAY_WC16;bitfield;1;;Week timer slot #16;Week timer 16 Days when allowed. ;Days;Days;
301;HREG_STA_HOUR_WC16;uint16;1;;;Week timer 16 Start h;;;
302;HREG_STA_MIN_WC16;uint16;1;;;Week timer 16 Start m;;;
303;HREG_STO_HOUR_WC16;uint16;1;;;Week timer 16 Stop h;;;
304;HREG_STO_MIN_WC16;uint16;1;;;Week timer 16 Stop m;;;
305;HREG_WC16;uint16;1;;;Week timer 16 Function;;;
306;HREG_DAY_WC17;bitfield;1;;Week timer slot #17;Week timer 17 Days when allowed. ;Days;Days;
307;HREG_STA_HOUR_WC17;uint16;1;;;Week timer 17 Start h;;;
308;HREG_STA_MIN_WC17;uint16;1;;;Week timer 17 Start m;;;
309;HREG_STO_HOUR_WC17;uint16;1;;;Week timer 17 Stop h;;;
310;HREG_STO_MIN_WC17;uint16;1;;;Week timer 17 Stop m;;;
311;HREG_WC17;uint16;1;;;Week timer 17 Function;;;
312;HREG_DAY_WC18;bitfield;1;;Week timer slot #18;Week timer 18 Days when allowed. ;Days;Days;
313;HREG_STA_HOUR_WC18;uint16;1;;;Week timer 18 Start h;;;
314;HREG_STA_MIN_WC18;uint16;1;;;Week timer 18 Start m;;;
315;HREG_STO_HOUR_WC18;uint16;1;;;Week timer 18 Stop h;;;
316;HREG_STO_MIN_WC18;uint16;1;;;Week timer 18 Stop m;;;
317;HREG_WC18;uint16;1;;;Week timer 18 Function;;;
318;HREG_DAY_WC19;bitfield;1;;Week timer slot #19;Week timer 19 Days when allowed. ;Days;Days;
319;HREG_STA_HOUR_WC19;uint16;1;;;Week timer 19 Start h;;;
320;HREG_STA_MIN_WC19;uint16;1;;;Week timer 19 Start m;;;
321;HREG_STO_HOUR_WC19;uint16;1;;;Week timer 19 Stop h;;;
322;HREG_STO_MIN_WC19;uint16;1;;;Week timer 19 Stop m;;;
323;HREG_WC19;uint16;1;;;Week timer 19 Function;;;
324;HREG_DAY_WC20;bitfield;1;;Week timer slot #20;Week timer 20 Days when allowed. ;Days;Days;
325;HREG_STA_HOUR_WC20;uint16;1;;;Week timer 20 Start h;;;
326;HREG_STA_MIN_WC20;uint16;1;;;Week timer 20 Start m;;;
327;HREG_STO_HOUR_WC20;uint16;1;;;Week timer 20 Stop h;;;
328;HREG_STO_MIN_WC20;uint16;1;;;Week timer 20 Stop m;;;
329;HREG_WC20;uint16;1;;;Week timer 20 Function;;;
330;HREG_STA_PV_Y1;uint16;1;;Year timer slot #1;Year program 1 start day-of-month;;;
331;HREG_STA_KK_Y1;uint16;1;;;Year program 1 stop month;;;
332;HREG_ACTIVE_TIMEPROGRAMS_1;uint16;1;;Active time programs, week slots 1-16;Active time programs, week slots 1-16;;;
333;HREG_STA_HOUR_Y1;uint16;1;;;Year program 1 start hour;;;
334;HREG_STA_MIN_Y1;uint16;1;;;Year program 1 start minute;;;
335;HREG_STO_PV_Y1;uint16;1;;;Year program 1 stop day of month;;;
336;HREG_STO_KK_Y1;uint16;1;;;Year program 1 stop month;;;
337;HREG_ACTIVE_TIMEPROGRAMS_2;uint16;1;;Active time programs, week slots 17-20 and year slots 1-5;Active time programs, week slots 17-20 and year slots 1-5;;;
338;HREG_STO_HOUR_Y1;uint16;1;;;Year program 1 stop hour;;;
339;HREG_STO_MIN_Y1;uint16;1;;;Year program 1 stop minute;;;
340;HREG_Y1;uint16;1;;;Year program 1 action;;;#define TIMER_PROGRAM_OFF 0 #define TIMER_AWAY        1 #define TIMER_AWAY_LONG   2 #define TIMER_HEAT_DIS    3 #define TIMER_COOL_DIS    4 #define TIMER_TEMP_DECR   5 #define TIMER_MAX_H       6 #define TIMER_MAX_C       7 #define TIMER_RELAY       16 #define TIMER_BOOST       17 /* Circulation air state change time program (Pallas) */ #define TIMER_CLOSED_CIRCULATION 18 /* This time program function is relevant in OFFICE program variant (use  * method) and it means that the machine should be running (instead of  * being in STOP state). */ #define TIMER_RUNTIME     30 
341;HREG_STA_PV_Y2;uint16;1;;Year timer slot #2;Year program 2 start day-of-month;;;
342;HREG_STA_KK_Y2;uint16;1;;;Year program 2 stop month;;;
343;HREG_UPTIME;uint16;1;;System uptime;System uptime;;;Warning: the count is approximative, it should not be used for time-keeping purposes
344;HREG_STA_HOUR_Y2;uint16;1;;;Year program 2 start hour;;;
345;HREG_STA_MIN_Y2;uint16;1;;;Year program 2 start minute;;;
346;HREG_STO_PV_Y2;uint16;1;;;Year program 2 stop day of month;;;
347;HREG_STO_KK_Y2;uint16;1;;;Year program 2 stop month;;;
348;Reserved;uint16;1;;Number of active panel bus units;Reserved;;;
349;HREG_STO_HOUR_Y2;uint16;1;;;Year program 2 stop hour;;;
350;HREG_STO_MIN_Y2;uint16;1;;;Year program 2 stop minute;;;
351;HREG_Y2;uint16;1;;;Year program 2 action;;;
352;HREG_STA_PV_Y3;uint16;1;;Year timer slot #3;Year program 3 start day-of-month;;;
353;HREG_STA_KK_Y3;uint16;1;;;Year program 3 stop month;;;
354;HREG_BOOTLOADER_VERSION;uint16;1;;Bootloader version;Bootloader version;;;
355;HREG_STA_HOUR_Y3;uint16;1;;;Year program 3 start hour;;;
356;HREG_STA_MIN_Y3;uint16;1;;;Year program 3 start minute;;;
357;HREG_STO_PV_Y3;uint16;1;;;Year program 3 stop day of month;;;
358;HREG_STO_KK_Y3;uint16;1;;;Year program 3 stop month;;;
359;HREG_FILTER_TEST_HR;uint16;1;;Filter test hour;Filter test hour;;;
360;HREG_STO_HOUR_Y3;uint16;1;;;Year program 3 stop hour;;;
361;HREG_STO_MIN_Y3;uint16;1;;;Year program 3 stop minute;;;
362;HREG_Y3;uint16;1;;;Year program 3 action;;;
363;HREG_STA_PV_Y4;uint16;1;;Year timer slot #4;Year program 4 start day-of-month;;;
364;HREG_STA_KK_Y4;uint16;1;;;Year program 4 stop month;;;
365;HREG_FILTER_TEST_DAYS;uint16;1;;Filter test day-of-week;Filter test day-of-week;;;Expressed as a bitfield similar to week time programs
366;HREG_STA_HOUR_Y4;uint16;1;;;Year program 4 start hour;;;
367;HREG_STA_MIN_Y4;uint16;1;;;Year program 4 start minute;;;
368;HREG_STO_PV_Y4;uint16;1;;;Year program 4 stop day of month;;;
369;HREG_STO_KK_Y4;uint16;1;;;Year program 4 stop month;;;
370;HREG_FILTER_TEST_TF;uint16;1;;Filter test TF fan speed;Filter test TF fan speed;;;During filter test mode TF will run at this constant fanspeed even in constant duct pressure mode.  Note that if value is outside range 20-100, 100% will be used
371;HREG_STO_HOUR_Y4;uint16;1;;;Year program 4 stop hour;;;
372;HREG_STO_MIN_Y4;uint16;1;;;Year program 4 stop minute;;;
373;HREG_Y4;uint16;1;;;Year program 4 action;;;
374;HREG_STA_PV_Y5;uint16;1;;Year timer slot #5;Year program 5 start day-of-month;;;
375;HREG_STA_KK_Y5;uint16;1;;;Year program 5 stop month;;;
376;HREG_FILTER_TEST_PF;uint16;1;;Filter test PF fan speed;Filter test PF fan speed;;;During filter test mode PF will run at this constant fanspeed even in constant duct pressure mode.  Note that if value is outside range 20-100, 100% will be used
377;HREG_STA_HOUR_Y5;uint16;1;;;Year program 5 start hour;;;
378;HREG_STA_MIN_Y5;uint16;1;;;Year program 5 start minute;;;
379;HREG_STO_PV_Y5;uint16;1;;;Year program 5 stop day of month;;;
380;HREG_STO_KK_Y5;uint16;1;;;Year program 5 stop month;;;
381;Reserved;;;;;Reserved;;;
382;HREG_STO_HOUR_Y5;uint16;1;;;Year program 5 stop hour;;;
383;HREG_STO_MIN_Y5;uint16;1;;;Year program 5 stop minute;;;
384;HREG_Y5;uint16;1;;;Year program 5 action;;;
385;HREG_ALARM1_ALMTYPE;uint16;1;;Alarm log entry #1;Alarm 1 (newest) alarm type;;Alarm 1 (newest) alarm type;ALARM_TE05_L =        1,      ALARM_TE10_L =       2,      ALARM_TE10_H =       3,      ALARM_TE20_H =       4,      ALARM_TE30_L =       5,      ALARM_TE30_H  =      6,      ALARM_HP       =     7,    /* This is both HP and MDX */      ALARM_SLP       =    8,      ALARM_TE45_L     =   9,      ALARM_LTO        =   10,      ALARM_COOL        =  11,      ALARM_EMERGENCY_STOP   =  12 ,       ALARM_EXTERNAL         = 13,   /** This used to be ALARM_FIRE on EDA */      ALARM_SERVICE       =14 ,             ALARM_PDS10       =  15,      ALARM_SPLY_FILT_H =  16,      ALARM_EXT_FILT_H  =  17,      ALARM_SPLY_FILT_L =  18 ,  /* This alarm is actually not in use. It is relevant only for large machines with 2-speed fan control */      ALARM_EXT_FILT_L  =  19  , /* This alarm is actually not in use. It is relevant only for large machines with 2-speed fan control */      ALARM_TF_PRES       =  20,      ALARM_PF_PRES       =  21 ,     ALARM_TE50_H   = 22,    ALARM_TE52_H   = 24,      ALARM_TF_ROTATION = 25,      ALARM_PF_ROTATION = 26,      ALARM_TE02_H   = 27,      ALARM_SERVICE_CONSTANT_DUCT_PRES = 28,   /* Under constant duct pressure control, Service alarm is triggered then fanspeeds reach a defined limit */ 
386;HREG_ALARM1_STATECLASS;uint16;1;;;Alarm 1 This defines the status (low byte) of the alarm;;;ALARM_STATE_OFF = 0, ALARM_STATE_ACKED = 1, ALARM_STATE_ON = 2. Write “1” or “2” to this register to acknowledge the alarm.
387;HREG_ALARM1_YY;uint16;1;;;Alarm 1 Alarm year;;;
388;HREG_ALARM1_MM;uint16;1;;;Alarm 1 Alarm month;;;
389;HREG_ALARM1_DD;uint16;1;;;Alarm 1 Alarm day.;;;
390;HREG_ALARM1_HH;uint16;1;;;Alarm 1 Alarm hour;;;
391;HREG_ALARM1_MI;uint16;1;;;Alarm 1 Alarm minutes;;;
392;HREG_ALARM2_ALMTYPE;uint16;1;;Alarm log entry #2;Alarm 2 (newest) alarm type;;;
393;HREG_ALARM2_STATECLASS;uint16;1;;;Alarm 2 This defines the status (low byte) of the alarm;;;
394;HREG_ALARM2_YY;uint16;1;;;Alarm 2 Alarm year;;;
395;HREG_ALARM2_MM;uint16;1;;;Alarm 2 Alarm month;;;
396;HREG_ALARM2_DD;uint16;1;;;Alarm 2 Alarm day.;;;
397;HREG_ALARM2_HH;uint16;1;;;Alarm 2 Alarm hour;;;
398;HREG_ALARM2_MI;uint16;1;;;Alarm 2 Alarm minutes;;;
399;HREG_ALARM3_ALMTYPE;uint16;1;;Alarm log entry #3;Alarm 3 (newest) alarm type;;;
400;HREG_ALARM3_STATECLASS;uint16;1;;;Alarm 3 This defines the status (low byte) of the alarm;;;
401;HREG_ALARM3_YY;uint16;1;;;Alarm 3 Alarm year;;;
402;HREG_ALARM3_MM;uint16;1;;;Alarm 3 Alarm month;;;
403;HREG_ALARM3_DD;uint16;1;;;Alarm 3 Alarm day.;;;
404;HREG_ALARM3_HH;uint16;1;;;Alarm 3 Alarm hour;;;
405;HREG_ALARM3_MI;uint16;1;;;Alarm 3 Alarm minutes;;;
406;HREG_ALARM4_ALMTYPE;uint16;1;;Alarm log entry #4;Alarm 4 (newest) alarm type;;;
407;HREG_ALARM4_STATECLASS;uint16;1;;;Alarm 4 This defines the status (low byte) of the alarm;;;
408;HREG_ALARM4_YY;uint16;1;;;Alarm 4 Alarm year;;;
409;HREG_ALARM4_MM;uint16;1;;;Alarm 4 Alarm month;;;
410;HREG_ALARM4_DD;uint16;1;;;Alarm 4 Alarm day.;;;
411;HREG_ALARM4_HH;uint16;1;;;Alarm 4 Alarm hour;;;
412;HREG_ALARM4_MI;uint16;1;;;Alarm 4 Alarm minutes;;;
413;HREG_ALARM5_ALMTYPE;uint16;1;;Alarm log entry #5;Alarm 5 (newest) alarm type;;;
414;HREG_ALARM5_STATECLASS;uint16;1;;;Alarm 5 This defines the status (low byte) of the alarm;;;
415;HREG_ALARM5_YY;uint16;1;;;Alarm 5 Alarm year;;;
416;HREG_ALARM5_MM;uint16;1;;;Alarm 5 Alarm month;;;
417;HREG_ALARM5_DD;uint16;1;;;Alarm 5 Alarm day.;;;
418;HREG_ALARM5_HH;uint16;1;;;Alarm 5 Alarm hour;;;
419;HREG_ALARM5_MI;uint16;1;;;Alarm 5 Alarm minutes;;;
420;HREG_ALARM6_ALMTYPE;uint16;1;;Alarm log entry #6;Alarm 6 (newest) alarm type;;;
421;HREG_ALARM6_STATECLASS;uint16;1;;;Alarm 6 This defines the status (low byte) of the alarm;;;
422;HREG_ALARM6_YY;uint16;1;;;Alarm 6 Alarm year;;;
423;HREG_ALARM6_MM;uint16;1;;;Alarm 6 Alarm month;;;
424;HREG_ALARM6_DD;uint16;1;;;Alarm 6 Alarm day.;;;
425;HREG_ALARM6_HH;uint16;1;;;Alarm 6 Alarm hour;;;
426;HREG_ALARM6_MI;uint16;1;;;Alarm 6 Alarm minutes;;;
427;HREG_ALARM7_ALMTYPE;uint16;1;;Alarm log entry #7;Alarm 7 (newest) alarm type;;;
428;HREG_ALARM7_STATECLASS;uint16;1;;;Alarm 7 This defines the status (low byte) of the alarm;;;
429;HREG_ALARM7_YY;uint16;1;;;Alarm 7 Alarm year;;;
430;HREG_ALARM7_MM;uint16;1;;;Alarm 7 Alarm month;;;
431;HREG_ALARM7_DD;uint16;1;;;Alarm 7 Alarm day.;;;
432;HREG_ALARM7_HH;uint16;1;;;Alarm 7 Alarm hour;;;
433;HREG_ALARM7_MI;uint16;1;;;Alarm 7 Alarm minutes;;;
434;HREG_ALARM8_ALMTYPE;uint16;1;;Alarm log entry #8;Alarm 8 (newest) alarm type;;;
435;HREG_ALARM8_STATECLASS;uint16;1;;;Alarm 8 This defines the status (low byte) of the alarm;;;
436;HREG_ALARM8_YY;uint16;1;;;Alarm 8 Alarm year;;;
437;HREG_ALARM8_MM;uint16;1;;;Alarm 8 Alarm month;;;
438;HREG_ALARM8_DD;uint16;1;;;Alarm 8 Alarm day.;;;
439;HREG_ALARM8_HH;uint16;1;;;Alarm 8 Alarm hour;;;
440;HREG_ALARM8_MI;uint16;1;;;Alarm 8 Alarm minutes;;;
441;HREG_ALARM9_ALMTYPE;uint16;1;;Alarm log entry #9;Alarm 9 (newest) alarm type;;;
442;HREG_ALARM9_STATECLASS;uint16;1;;;Alarm 9 This defines the status (low byte) of the alarm;;;
443;HREG_ALARM9_YY;uint16;1;;;Alarm 9 Alarm year;;;
444;HREG_ALARM9_MM;uint16;1;;;Alarm 9 Alarm month;;;
445;HREG_ALARM9_DD;uint16;1;;;Alarm 9 Alarm day.;;;
446;HREG_ALARM9_HH;uint16;1;;;Alarm 9 Alarm hour;;;
447;HREG_ALARM9_MI;uint16;1;;;Alarm 9 Alarm minutes;;;
448;HREG_ALARM10_ALMTYPE;uint16;1;;Alarm log entry #10;Alarm 10 (newest) alarm type;;;
449;HREG_ALARM10_STATECLASS;uint16;1;;;Alarm 10 This defines the status (low byte) of the alarm;;;
450;HREG_ALARM10_YY;uint16;1;;;Alarm 10 Alarm year;;;
451;HREG_ALARM10_MM;uint16;1;;;Alarm 10 Alarm month;;;
452;HREG_ALARM10_DD;uint16;1;;;Alarm 10 Alarm day.;;;
453;HREG_ALARM10_HH;uint16;1;;;Alarm 10 Alarm hour;;;
454;HREG_ALARM10_MI;uint16;1;;;Alarm 10 Alarm minutes;;;
455;HREG_ALARM11_ALMTYPE;uint16;1;;Alarm log entry #11;Alarm 11 (newest) alarm type;;;
456;HREG_ALARM11_STATECLASS;uint16;1;;;Alarm 11 This defines the status (low byte) of the alarm;;;
457;HREG_ALARM11_YY;uint16;1;;;Alarm 11 Alarm year;;;
458;HREG_ALARM11_MM;uint16;1;;;Alarm 11 Alarm month;;;
459;HREG_ALARM11_DD;uint16;1;;;Alarm 11 Alarm day.;;;
460;HREG_ALARM11_HH;uint16;1;;;Alarm 11 Alarm hour;;;
461;HREG_ALARM11_MI;uint16;1;;;Alarm 11 Alarm minutes;;;
462;HREG_ALARM12_ALMTYPE;uint16;1;;Alarm log entry #12;Alarm 12 (newest) alarm type;;;
463;HREG_ALARM12_STATECLASS;uint16;1;;;Alarm 12 This defines the status (low byte) of the alarm;;;
464;HREG_ALARM12_YY;uint16;1;;;Alarm 12 Alarm year;;;
465;HREG_ALARM12_MM;uint16;1;;;Alarm 12 Alarm month;;;
466;HREG_ALARM12_DD;uint16;1;;;Alarm 12 Alarm day.;;;
467;HREG_ALARM12_HH;uint16;1;;;Alarm 12 Alarm hour;;;
468;HREG_ALARM12_MI;uint16;1;;;Alarm 12 Alarm minutes;;;
469;HREG_ALARM13_ALMTYPE;uint16;1;;Alarm log entry #13;Alarm 13 (newest) alarm type;;;
470;HREG_ALARM13_STATECLASS;uint16;1;;;Alarm 13 This defines the status (low byte) of the alarm;;;
471;HREG_ALARM13_YY;uint16;1;;;Alarm 13 Alarm year;;;
472;HREG_ALARM13_MM;uint16;1;;;Alarm 13 Alarm month;;;
473;HREG_ALARM13_DD;uint16;1;;;Alarm 13 Alarm day.;;;
474;HREG_ALARM13_HH;uint16;1;;;Alarm 13 Alarm hour;;;
475;HREG_ALARM13_MI;uint16;1;;;Alarm 13 Alarm minutes;;;
476;HREG_ALARM14_ALMTYPE;uint16;1;;Alarm log entry #14;Alarm 14 (newest) alarm type;;;
477;HREG_ALARM14_STATECLASS;uint16;1;;;Alarm 14 This defines the status (low byte) of the alarm;;;
478;HREG_ALARM14_YY;uint16;1;;;Alarm 14 Alarm year;;;
479;HREG_ALARM14_MM;uint16;1;;;Alarm 14 Alarm month;;;
480;HREG_ALARM14_DD;uint16;1;;;Alarm 14 Alarm day.;;;
481;HREG_ALARM14_HH;uint16;1;;;Alarm 14 Alarm hour;;;
482;HREG_ALARM14_MI;uint16;1;;;Alarm 14 Alarm minutes;;;
483;HREG_ALARM15_ALMTYPE;uint16;1;;Alarm log entry #15;Alarm 15 (newest) alarm type;;;
484;HREG_ALARM15_STATECLASS;uint16;1;;;Alarm 15 This defines the status (low byte) of the alarm;;;
485;HREG_ALARM15_YY;uint16;1;;;Alarm 15 Alarm year;;;
486;HREG_ALARM15_MM;uint16;1;;;Alarm 15 Alarm month;;;
487;HREG_ALARM15_DD;uint16;1;;;Alarm 15 Alarm day.;;;
488;HREG_ALARM15_HH;uint16;1;;;Alarm 15 Alarm hour;;;
489;HREG_ALARM15_MI;uint16;1;;;Alarm 15 Alarm minutes;;;
490;HREG_ALARM16_ALMTYPE;uint16;1;;Alarm log entry #16;Alarm 16 (newest) alarm type;;;
491;HREG_ALARM16_STATECLASS;uint16;1;;;Alarm 16 This defines the status (low byte) of the alarm;;;
492;HREG_ALARM16_YY;uint16;1;;;Alarm 16 Alarm year;;;
493;HREG_ALARM16_MM;uint16;1;;;Alarm 16 Alarm month;;;
494;HREG_ALARM16_DD;uint16;1;;;Alarm 16 Alarm day.;;;
495;HREG_ALARM16_HH;uint16;1;;;Alarm 16 Alarm hour;;;
496;HREG_ALARM16_MI;uint16;1;;;Alarm 16 Alarm minutes;;;
497;HREG_ALARM17_ALMTYPE;uint16;1;;Alarm log entry #17;Alarm 17 (newest) alarm type;;;
498;HREG_ALARM17_STATECLASS;uint16;1;;;Alarm 17 This defines the status (low byte) of the alarm;;;
499;HREG_ALARM17_YY;uint16;1;;;Alarm 17 Alarm year;;;
500;HREG_ALARM17_MM;uint16;1;;;Alarm 17 Alarm month;;;
501;HREG_ALARM17_DD;uint16;1;;;Alarm 17 Alarm day.;;;
502;HREG_ALARM17_HH;uint16;1;;;Alarm 17 Alarm hour;;;
503;HREG_ALARM17_MI;uint16;1;;;Alarm 17 Alarm minutes;;;
504;HREG_ALARM18_ALMTYPE;uint16;1;;Alarm log entry #18;Alarm 18 (newest) alarm type;;;
505;HREG_ALARM18_STATECLASS;uint16;1;;;Alarm 18 This defines the status (low byte) of the alarm;;;
506;HREG_ALARM18_YY;uint16;1;;;Alarm 18 Alarm year;;;
507;HREG_ALARM18_MM;uint16;1;;;Alarm 18 Alarm month;;;
508;HREG_ALARM18_DD;uint16;1;;;Alarm 18 Alarm day.;;;
509;HREG_ALARM18_HH;uint16;1;;;Alarm 18 Alarm hour;;;
510;HREG_ALARM18_MI;uint16;1;;;Alarm 18 Alarm minutes;;;
511;HREG_ALARM19_ALMTYPE;uint16;1;;Alarm log entry #19;Alarm 19 (newest) alarm type;;;
512;HREG_ALARM19_STATECLASS;uint16;1;;;Alarm 19 This defines the status (low byte) of the alarm;;;
513;HREG_ALARM19_YY;uint16;1;;;Alarm 19 Alarm year;;;
514;HREG_ALARM19_MM;uint16;1;;;Alarm 19 Alarm month;;;
515;HREG_ALARM19_DD;uint16;1;;;Alarm 19 Alarm day.;;;
516;HREG_ALARM19_HH;uint16;1;;;Alarm 19 Alarm hour;;;
517;HREG_ALARM19_MI;uint16;1;;;Alarm 19 Alarm minutes;;;
518;HREG_ALARM20_ALMTYPE;uint16;1;;Alarm log entry #20;Alarm 20 (newest) alarm type;;;
519;HREG_ALARM20_STATECLASS;uint16;1;;;Alarm 20 This defines the status (low byte) of the alarm;;;
520;HREG_ALARM20_YY;uint16;1;;;Alarm 20 Alarm year;;;
521;HREG_ALARM20_MM;uint16;1;;;Alarm 20 Alarm month;;;
522;HREG_ALARM20_DD;uint16;1;;;Alarm 20 Alarm day.;;;
523;HREG_ALARM20_HH;uint16;1;;;Alarm 20 Alarm hour;;;
524;HREG_ALARM20_MI;uint16;1;;;Alarm 20 Alarm minutes;;;
525;Reserved;;;;;Reserved;;;
526;Reserved;;;;;Reserved;;;
527;Reserved;;;;;Reserved;;;
528;Reserved;;;;;Reserved;;;
529;Reserved;;;;;Reserved;;;
530;Reserved;;;;;Reserved;;;
531;Reserved;;;;;Reserved;;;
532;Reserved;;;;;Reserved;;;
533;Reserved;;;;;Reserved;;;
534;Reserved;;;;;Reserved;;;
535;Reserved;;;;;Reserved;;;
536;Reserved;;;;;Reserved;;;
537;Reserved;;;;;Reserved;;;
538;HREG_ALARM_SERVICE_TIME;uint16;1;;Service reminder;Number of days until service reminder alarm is signaled.;Service reminder;Number of days until service reminder alarm is given;
539;Reserved;;;;;Reserved;;;
540;Reserved;;;;;Reserved;;;
541;Reserved;;;;;Reserved;;;
542;Reserved;;;;;Reserved;;;
543;Reserved;;;;;Reserved;;;
544;Reserved;;;;;Reserved;;;
545;Reserved;;;;;Reserved;;;
546;Reserved;;;;;Reserved;;;
547;Reserved;;;;;Reserved;;;
548;Reserved;;;;;Reserved;;;
549;Reserved;;;;;Reserved;;;
550;Reserved;;;;;Reserved;;;
551;Reserved;;;;;Reserved;;;
552;Reserved;;;;;Reserved;;;
553;Reserved;;;;;Reserved;;;
554;Reserved;;;;;Reserved;;;
555;Reserved;;;;;Reserved;;;
556;Reserved;;;;;Reserved;;;
557;Reserved;;;;;Reserved;;;
558;Reserved;;;;;Reserved;;;
559;Reserved;;;;;Reserved;;;
560;Reserved;;;;;Reserved;;;
561;Reserved;;;;;Reserved;;;
562;Reserved;;;;;Reserved;;;
563;Reserved;;;;;Reserved;;;
564;Reserved;;;;;Reserved;;;
565;Reserved;;;;;Reserved;;;
566;Reserved;;;;;Reserved;;;
567;Reserved;;;;;Reserved;;;
568;Reserved;;;;;Reserved;;;
569;Reserved;;;;;Reserved;;;
570;Reserved;;;;;Reserved;;;
571;Reserved;;;;;Reserved;;;
572;Reserved;;;;;Reserved;;;
573;Reserved;;;;;Reserved;;;
574;Reserved;;;;;Reserved;;;
575;Reserved;;;;;Reserved;;;
576;Reserved;;;;;Reserved;;;
577;Reserved;;;;;Reserved;;;
578;HREG_B_ALARM_START;uint16;1;;Start time;B alarm relay signaling allowed start hour.;Start time;Allowed start time for B alarm output;The defined time is HH:00, where HH is the register's value
579;HREG_B_ALARM_STOP;uint16;1;;Ending time;B alarm relay signaling allowed stop hour.;Ending time;Allowed stop time for B alarm output;The defined time is HH:00, where HH is the register's value
580;HREG_B_ALARM_WEEKDAYS;bitfield;1;;Weekdays;B alarm relay signaling allowed weekdays (bitmap, stored in low 7 bits of the register).;Weekdays;Choose allowed weekdays for B alarm output;Bit 0: Sunday … Bit 6: Saturday
581;HREG_N_O_ALARMS;uint16;1;;Number of alarms;Current number of alarms in the alarm log.;Number of alarms;Current number of alarms in the alarm log;
582;HREG_C_MIN_RTC;uint16;1;;;RTC interface for changing minutes field;;;
583;HREG_C_HOUR_RTC;uint16;1;;;RTC interface for changing hour field;;;
584;HREG_C_DAY_RTC;uint16;1;;;RTC interface for changing day of month field;;;
585;HREG_C_MONTH_RTC;uint16;1;;;RTC interface for changing month field;;;
586;HREG_C_YEAR_RTC;uint16;1;;;RTC interface for changing year field;;;
587;Reserved;;;;;Reserved;;;
588;Reserved;;;;;Reserved;;;
589;Reserved;;;;;Reserved;;;
590;Reserved;;;;;Reserved;;;
591;Reserved;;;;;Reserved;;;
592;Reserved;;;;;Reserved;;;
593;Reserved;;;;;Reserved;;;
594;Reserved;;;;;Reserved;;;
595;Reserved;;;;;Reserved;;;
596;Reserved;;;;;Reserved;;;
597;HREG_FAMILY_TYPE;uint16;1;;Family;Machine family type;Family;Machine family type;
598;HREG_HW_VERSION;enumeration;1;;Hardware version;Hardware version desc;MD Hardware version;Unit motherboard hardware version;Value 1 corresponds to Rev.A, value 2 is B, value is C and so forth up to 27 which is Rev.Z
599;HREG_SW_VERSION;uint16;100;;MD SW version;MD Software release number;MD SW version;Unit motherboard software version;
600;Reserved;;;;;Reserved;;;
601;Reserved;;;;;Reserved;;;
602;Reserved;;;;;Reserved;;;
603;Reserved;;;;;Reserved;;;
604;Reserved;;;;;Reserved;;;
605;Reserved;;;;;Reserved;;;
606;Reserved;;;;;Reserved;;;
607;Reserved;;;;;Reserved;;;
608;Reserved;;;;;Reserved;;;
609;Reserved;;;;;Reserved;;;
610;Reserved;;;;;Reserved;;;
611;Reserved;;;;;Reserved;;;
612;Reserved;;;;;Reserved;;;
613;Reserved;;;;;Reserved;;;
614;Reserved;;;;;Reserved;;;
615;Reserved;;;;;Reserved;;;
616;Reserved;;;;;Reserved;;;
617;Reserved;;;;;Reserved;;;
618;Reserved;;;;;Reserved;;;
619;Reserved;;;;;Reserved;;;
620;Reserved;;;;;Reserved;;;
621;Reserved;;;;;Reserved;;;
622;Reserved;;;;;Reserved;;;
623;Reserved;;;;;Reserved;;;
624;Reserved;;;;;Reserved;;;
625;Reserved;;;;;Reserved;;;
626;Reserved;;;;;Reserved;;;
627;Reserved;;;;;Reserved;;;
628;Reserved;;;;;Reserved;;;
629;Reserved;;;;;Reserved;;;
630;Reserved;;;;;Reserved;;;
631;Reserved;;;;;Reserved;;;
632;Reserved;;;;;Reserved;;;
633;Reserved;;;;;Reserved;;;
634;Reserved;;;;;Reserved;;;
635;Reserved;;;;;Reserved;;;
636;Reserved;;;;;Reserved;;;
637;Reserved;;;;;Reserved;;;
638;Reserved;;;;;Reserved;;;
639;Reserved;;;;;Reserved;;;
640;HREG_MBADDR;uint16;1;1 - 100;Modbus id;Modbus address used by the card.;Modbus id;MD card modbus address 1 - 100;
641;Reserved;;;;;Reserved;;;
642;Reserved;;;;;Reserved;;;
643;Reserved;;;;;Reserved;;;
644;Reserved;;;;;Reserved;;;
645;Reserved;;;;;Reserved;;;
646;Reserved;;;;;Reserved;;;
647;Reserved;;;;;Reserved;;;
648;Reserved;;;;;Reserved;;;
649;Reserved;;;;;Reserved;;;
650;Reserved;;;;;Reserved;;;
651;Reserved;;;;;Reserved;;;
652;Reserved;;;;;Reserved;;;
653;Reserved;;;;;Reserved;;;
654;HREG_IPADDR_HIGH;uint16;1;;IP address;IP address high bytes Useful values: 192.168 would be 49320;IP address;;Calculate this as A*2^8+B for IP addr starting with bytes A.B
655;HREG_IPADDR_LOW;uint16;1;;IP address;IP address low bytes;IP address;;: Calculate this as C*2^8+D for IP addr ending with bytes C.D
656;HREG_GWIPADDR_HIGH;uint16;1;;Gateway IP address;Gateway IP address low bytes Note: useful values: 192.168 would be 49320;;;Calculate this as A*2^8+B for gateway IP addr starting with bytes A.B
657;HREG_GWIPADDR_LOW;uint16;1;;Gateway IP address;Gateway IP address low bytes/;;;: Calculate this as C*2^8+D for gateway IP addr ending with bytes C.D
658;HREG_NETMASK_HIGH;uint16;1;;Netmask;Netmask high bytes Note: useful value 65535, for bytes 255.255;;;: Calculate this as A*2^8+B for netmask starting with bytes A.B
659;HREG_NETMASK_LOW;uint16;1;;Netmask;Netmask low bytes Note: useful value 65280, for bytes 255.0;;;: Calculate this as C*2^8+D for netmask ending with bytes C.D
660;HREG_DNSIP_ADDR_HIGH;uint16;1;;DNS server address;DNS server IP high bytes;;;: Calculate this as A*2^8+B for ip starting with bytes A.B
661;HREG_DNSIP_ADDR_LOW;uint16;1;;DNS server address;DNS server IP low bytes;;;: Calculate this as C*2^8+D for ip ending with bytes C.D
662;Reserved;;;;;Reserved;;;
663;Reserved;;;;;Reserved;;;
664;Reserved;;;;;Reserved;;;
665;Reserved;;;;;Reserved;;;
666;Reserved;;;;;Reserved;;;
667;HREG_DHCP_CONTROL;enumeration;1;;DHCP;Dynamic Host Configuration Protocol;;;Value of 0 indicates DHCP is active, value of 1 indicates DHCP inactive.
668;Reserved;;;;;Reserved;;;
669;Reserved;;;;;Reserved;;;
670;Reserved;;;;;Reserved;;;
671;Reserved;;;;;Reserved;;;
672;Reserved;;;;;Reserved;;;
673;Reserved;;;;;Reserved;;;
674;Reserved;;;;;Reserved;;;
675;Reserved;;;;;Reserved;;;
676;Reserved;;;;;Reserved;;;
677;Reserved;;;;;Reserved;;;
678;Reserved;;;;;Reserved;;;
679;Reserved;;;;;Reserved;;;
680;Reserved;;;;;Reserved;;;
681;Reserved;;;;;Reserved;;;
682;Reserved;;;;;Reserved;;;
683;Reserved;;;;;Reserved;;;
684;Reserved;;;;;Reserved;;;
685;Reserved;;;;;Reserved;;;
686;Reserved;;;;;Reserved;;;
687;Reserved;;;;;Reserved;;;
688;Reserved;;;;;Reserved;;;
689;Reserved;;;;;Reserved;;;
690;Reserved;;;;;Reserved;;;
691;Reserved;;;;;Reserved;;;
692;Reserved;;;;;Reserved;;;
693;Reserved;;;;;Reserved;;;
694;Reserved;;;;;Reserved;;;
695;Reserved;;;;;Reserved;;;
696;Reserved;;;;;Reserved;;;
697;Reserved;;;;;Reserved;;;
698;Reserved;;;;;Reserved;;;
699;Reserved;;;;;Reserved;;;
700;Reserved;;;;;Reserved;;;
701;Reserved;;;;;Reserved;;;
702;Reserved;;;;;Reserved;;;
703;Reserved;;;;;Reserved;;;
704;Reserved;;;;;Reserved;;;
705;Reserved;;;;;Reserved;;;
706;Reserved;;;;;Reserved;;;
707;Reserved;;;;;Reserved;;;
708;Reserved;;;;;Reserved;;;
709;Reserved;;;;;Reserved;;;
710;Reserved;;;;;Reserved;;;
711;Reserved;;;;;Reserved;;;
712;Reserved;;;;;Reserved;;;
713;Reserved;;;;;Reserved;;;
714;Reserved;;;;;Reserved;;;
715;Reserved;;;;;Reserved;;;
716;Reserved;;;;;Reserved;;;
717;Reserved;;;;;Reserved;;;
718;Reserved;;;;;Reserved;;;
719;Reserved;;;;;Reserved;;;
720;Reserved;;;;;Reserved;;;
721;Reserved;;;;;Reserved;;;
722;Reserved;;;;;Reserved;;;
723;Reserved;;;;;Reserved;;;
724;Reserved;;;;;Reserved;;;
725;Reserved;;;;;Reserved;;;
726;Reserved;;;;;Reserved;;;
727;Reserved;;;;;Reserved;;;
728;Reserved;;;;;Reserved;;;
729;Reserved;;;;;Reserved;;;
730;Reserved;;;;;Reserved;;;
731;Reserved;;;;;Reserved;;;
732;Reserved;;;;;Reserved;;;
733;HREG_MODBUS_SPEED;enumeration;1;;Modbus speed;Modbus RTU serial line speed;Modbus speed;Modbus RTU serial line speed; SPEED_9600 = 6, SPEED_19200 = 7, SPEED_115200 = 10 
734;HREG_MODBUS_PARITY;enumeration;1;;Modbus parity;Modbus RTU serial line parity;Modbus parity;Modbus RTU serial line parity;PARITY_NONE = 1, PARITY_EVEN = 2
735;Reserved;;;;;Reserved;;;
736;Reserved;;;;;Reserved;;;
737;Reserved;;;;;Reserved;;;
738;Reserved;;;;;Reserved;;;
739;Reserved;;;;;Reserved;;;
740;Reserved;;;;;Reserved;;;
741;Reserved;;;;;Reserved;;;
742;Reserved;;;;;Reserved;;;
743;Reserved;;;;;Reserved;;;
744;Reserved;;;;;Reserved;;;
745;Reserved;;;;;Reserved;;;
746;Reserved;;;;;Reserved;;;
747;Reserved;;;;;Reserved;;;
748;Reserved;;;;;Reserved;;;
749;Reserved;;;;;Reserved;;;
750;Reserved;;;;;Reserved;;;
751;Reserved;;;;;Reserved;;;
752;Reserved;;;;;Reserved;;;
753;Reserved;;;;;Reserved;;;
754;Reserved;;;;;Reserved;;;
755;Reserved;;;;;Reserved;;;
756;Reserved;;;;;Reserved;;;
757;Reserved;;;;;Reserved;;;
758;Reserved;;;;;Reserved;;;
759;Reserved;;;;;Reserved;;;
760;Reserved;;;;;Reserved;;;
761;Reserved;;;;;Reserved;;;
762;Reserved;;;;;Reserved;;;
763;Reserved;;;;;Reserved;;;
764;Reserved;;;;;Reserved;;;
765;Reserved;;;;;Reserved;;;
766;Reserved;;;;;Reserved;;;
767;Reserved;;;;;Reserved;;;
768;Reserved;;;;;Reserved;;;
769;Reserved;;;;;Reserved;;;
770;Reserved;;;;;Reserved;;;
771;Reserved;;;;;Reserved;;;
772;Reserved;;;;;Reserved;;;
773;Reserved;;;;;Reserved;;;
774;HREG_EFFECTIVE_CIRCULATION;uint16;1;;Fan speed, circulation air;Circulation air fan's current speed;;;Kotilämpö, EMB, Mixbox
775;Reserved;;;;;Reserved;;;
776;Reserved;;;;;Reserved;;;
777;Reserved;;;;;Reserved;;;
778;Reserved;;;;;Reserved;;;
779;Reserved;;;;;Reserved;;;
780;HREG_AO1_VOLT;uint16;10;;AO1 voltage;The voltage on Analog Output 1;;;NB: Only on sw 1.18 and above
781;HREG_AO2_VOLT;uint16;10;;AO2 voltage;The voltage on Analog Output 2;;;NB: Only on sw 1.18 and above
782;HREG_AO3_VOLT;uint16;10;;AO3 voltage;The voltage on Analog Output 3;;;NB: Only on sw 1.18 and above
783;HREG_AO4_VOLT;uint16;10;;AO4 voltage;The voltage on Analog Output 4;;;NB: Only on sw 1.18 and above
784;HREG_AO5_VOLT;uint16;10;;AO5 voltage;The voltage on Analog Output 5;;;NB: Only on sw 1.18 and above
785;HREG_AO6_VOLT;uint16;10;;AO6 voltage;The voltage on Analog Output 6;;;NB: Only on sw 1.18 and above
786;HREG_AO7_VOLT;uint16;10;;AO7 voltage;The voltage on Analog Output 7;;;NB: Only on sw 1.18 and above
787;HREG_AO8_VOLT;uint16;10;;AO8 voltage;The voltage on Analog Output 8;;;NB: Only on sw 1.18 and above
788;HREG_DI9_PULSE_CNT;uint16;1;;DI9 pulse count;Number of pulses detected on DI9;;;NB: Only on sw 1.18 and above
789;HREG_DI_BITMAP;uint16;1;;DI1-12 and X9-GPIO1-3 status;Status bitmap of digital inputs DI1 to DI12 and GPIO pins 1-3 on connector X9;;;NB: Only on sw 1.18 and above
790;HREG_AI9_VOLT;uint16;10;;AI9 voltage;The measured voltage on Analog Input 9;;;Input also known as X10_1. NB: long time constant! NB: Only on sw 1.18 and above
791;HREG_AI10_VOLT;uint16;10;;AI10 voltage;The measured voltage on Analog Input 10;;;Input also known as X10_1. NB: long time constant! NB: Only on sw 1.18 and above
792;HREG_AI11_VOLT;uint16;10;;AI11 voltage;The measured voltage on Analog Input 11;;;Input also known as X10_1. NB: long time constant! NB: Only on sw 1.18 and above
793;HREG_AI12_VOLT;uint16;10;;AI12 voltage;The measured voltage on Analog Input 12;;;Input also known as X10_1. NB: long time constant! NB: Only on sw 1.18 and above
794;HREG_AI13_VOLT;uint16;10;;AI13 voltage;The measured voltage on Analog Input 13;;;Input also known as X10_1. NB: long time constant! NB: Only on sw 1.18 and above
795;HREG_AI14_VOLT;uint16;10;;AI14 voltage;The measured voltage on Analog Input 14;;;Input also known as X10_1. NB: long time constant! NB: Only on sw 1.18 and above
796;HREG_AI15_VOLT;uint16;10;;AI15 voltage;The measured voltage on Analog Input 15;;;Input also known as X10_1. NB: long time constant! NB: Only on sw 1.18 and above
797;HREG_AI16_VOLT;uint16;10;;AI16 voltage;The measured voltage on Analog Input 16;;;Input also known as X10_1. NB: long time constant! NB: Only on sw 1.18 and above
798;HREG_DO_BITMAP;uint16;1;;DO1-8 status;Status bitmap of digital outputs (relays);;;NB: Only on sw 1.18 and above
799;Reserved;uint16;1;;Ping register;Reserved;;;This register is used by eAir web UI to test if the connection is live
